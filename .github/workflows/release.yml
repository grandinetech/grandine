on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      ref:
        description: 'The reference (branch/tag/commit) to checkout'
        required: false

jobs:
  build:
    name: Build for target ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
          - target: aarch64-apple-darwin
            os: ubuntu-latest
          - target: x86_64-apple-darwin
            os: ubuntu-latest
          - target: x86_64-pc-windows-gnu
            os: windows-latest
    steps:
      - name: Maximize build space
        if: runner.os == 'Linux'
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 2048
          swap-size-mb: 1024
      - name: Disable autocrlf (Windows)
        if: runner.os == 'Windows'
        run: git config --global core.autocrlf false
      - name: Setup nim for constantine backend
        if: runner.os != 'Macos'
        uses: jiro4989/setup-nim-action@v2
        with:
          nim-version: '2.0.2'
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          parent-nim-install-directory: ${{ runner.temp }}
      - name: Install dependencies for constantine backend
        if: runner.os == 'Linux'
        run: |
          sudo DEBIAN_FRONTEND='noninteractive' apt-get install \
            --no-install-recommends -yq \
            libgmp-dev \
            llvm
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref || github.ref }}
          submodules: true
          lfs: true
      - name: Build library
        uses: houseabsolute/actions-rust-cross@v1
        with:
          command: build
          target: ${{ matrix.target }}
          args: "-p c_grandine --locked --profile=compact"
      - name: Upload dynamic libs
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.target }}
          path: target/${{ matrix.target }}/compact/libc_grandine.so
  publish:
    name: Publish
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref || github.ref }}
          submodules: true
          lfs: true

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: bindings/csharp/Grandine.Bindings/runtimes

      - name: Display structure of downloaded files
        run: ls -R bindings/csharp/Grandine.Bindings

      - name: Restore packages
        working-directory: bindings/csharp/Grandine.Bindings
        run: dotnet restore

      - name: Package with dotnet pack
        working-directory: bindings/csharp/Grandine.Bindings
        run: dotnet pack -c release --no-restore -o nupkgs -p:ContinuousIntegrationBuild=true
